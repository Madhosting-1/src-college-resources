Big Data Lab Exercises: HBase & Hive Commands
This document consolidates all the lab questions and their corresponding HBase and Hive commands for easy submission.

Question 1: HBase Table Operations (Base Program)
Commands:
# Start HBase shell
hbase shell

# Create table
create 'Employee', 'PersonalDetails', 'ProfessionalDetails'

# Insert 5 rows
put 'Employee', 'emp1', 'PersonalDetails:name', 'Alice'
put 'Employee', 'emp1', 'ProfessionalDetails:designation', 'Engineer'

put 'Employee', 'emp2', 'PersonalDetails:name', 'Bob'
put 'Employee', 'emp2', 'ProfessionalDetails:designation', 'Manager'

put 'Employee', 'emp3', 'PersonalDetails:name', 'Charlie'
put 'Employee', 'emp3', 'ProfessionalDetails:designation', 'Analyst'

put 'Employee', 'emp4', 'PersonalDetails:name', 'David'
put 'Employee', 'emp4', 'ProfessionalDetails:designation', 'Engineer'

put 'Employee', 'emp5', 'PersonalDetails:name', 'Eve'
put 'Employee', 'emp5', 'ProfessionalDetails:designation', 'Manager'

# Retrieve all records
scan 'Employee'

Question 2: HBase Program with Filters
Commands:
# (Assuming table already exists; otherwise recreate and reinsert)

# Scan with filter for Managers
toLower=`scan 'Employee', { FILTER => "SingleColumnValueFilter('ProfessionalDetails', 'designation', =, 'binary:Manager')" }`

Question 3: Hive Basic Table Operations
Commands:
-- Start Hive shell
hive

-- Create database and use it
CREATE DATABASE companydb;
USE companydb;

-- Create table
CREATE TABLE company (
  cmp_id INT,
  cmp_name STRING,
  cmp_place STRING,
  Date_started STRING,
  awards INT
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

-- Insert 5 records
INSERT INTO TABLE company VALUES
(1, 'TechSoft', 'Bangalore', '2010-06-12', 4),
(2, 'DataCorp', 'Hyderabad', '2012-09-23', 2),
(3, 'NetSolutions', 'Pune', '2015-01-18', 6),
(4, 'CloudMatrix', 'Chennai', '2013-11-08', 3),
(5, 'AIWorks', 'Mumbai', '2018-05-15', 5);

-- Display all records
SELECT * FROM company;

Question 4: Hive + HDFS Integration
Commands:
-- In Hive shell
CREATE DATABASE companyDB;
USE companyDB;

CREATE TABLE employee (
  emp_id INT,
  emp_name STRING
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
STORED AS TEXTFILE;
# On local machine, create data file
cat << EOF > employee_data.txt
101,John
102,Emily
103,Arjun
104,Ayesha
105,Ravi
EOF

# Upload to HDFS
hdfs dfs -mkdir /user/hive/employee_data
hdfs dfs -put employee_data.txt /user/hive/employee_data/
-- Create Hive table for HDFS data
CREATE TABLE employee_hdfs (
  emp_id INT,
  emp_name STRING
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

-- Load data from HDFS
LOAD DATA INPATH '/user/hive/employee_data/employee_data.txt' INTO TABLE employee_hdfs;

-- Verify
SELECT * FROM employee_hdfs;

Question 5: Hive Complex Query
Commands:
-- Create database and marketing table
CREATE DATABASE marketingdb;
USE marketingdb;

CREATE TABLE marketing (
  emp_id INT,
  emp_name STRING,
  designation STRING,
  salary FLOAT,
  profit FLOAT
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

-- Insert sample records
INSERT INTO marketing VALUES
(1, 'John', 'Manager', 75000, 80000),
(2, 'Emily', 'Executive', 60000, 30000),
(3, 'Arjun', 'Manager', 90000, 70000),
(4, 'Sara', 'Analyst', 55000, 55000),
(5, 'Ravi', 'Executive', 65000, 51000),
(6, 'Aditi', 'Director', 120000, 100000);

-- Query: profit > 50,000
SELECT * FROM marketing WHERE profit > 50000;

-- Group by designation, average salary
SELECT designation, AVG(salary) AS avg_salary
FROM marketing
GROUP BY designation;

-- Top 3 highest-paid
SELECT emp_id, emp_name, salary
FROM marketing
ORDER BY salary DESC
LIMIT 3;

-- (Bonus) JOIN with department
CREATE TABLE department (
  dept_id INT,
  dept_name STRING
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

INSERT INTO department VALUES
(101, 'Marketing'),
(102, 'Sales'),
(103, 'HR');

-- Assuming marketing table has dept_id column
SELECT m.emp_name, d.dept_name
FROM marketing m
JOIN department d ON (m.dept_id = d.dept_id);
